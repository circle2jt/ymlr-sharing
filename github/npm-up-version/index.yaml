title: Auto update package version
description: Update package version and collect git logs into commit
# debug: all
vars:
  preid: "" # [alpha | beta]
  versionName: "prerelease" # [<newversion> | major | minor | patch | premajor | preminor | prepatch | prerelease]
  commitFormat: "chore[^:]*: ${$vars.matchVersion}([^ ]+)"
  changeDir: ./changes
  changeFile: ./CHANGES.md
  commitFiles: ""
  force: false
runs:
  - vars:
      version: ""
      lastCommit: ""
      scan: true
      scanIndex: 0
      scanCount: 10
      gitLogs: []
  - js: |
      if (typeof $vars.commitFiles === 'string') {
        $vars.commitFiles = $vars.commitFiles
          .split(',')
          .map(e => e.trim())
          .filter(e => !!e)
      }
  - name: Validate input
    runs:
      - if: ${!$vars.versionName}
        input'select:
          title: Version name
          choices:
            - title: major (1.x.x -> 2.0.0)
              value: major
            - title: minor (x.1.x -> x.2.0)
              value: minor
            - title: patch  (x.x.1 -> x.x.2)
              value: patch
            - title: premajor (1.x.x -> 2.0.0-0)
              value: premajor
            - title: preminor (x.1.x -> x.2.0-0)
              value: preminor
            - title: prepatch (x.x.1 -> x.x.2-0)
              value: prepatch
            - title: prerelease (x.x.1 -> x.x.2) (x.x.1-0 -> x.x.1-1)
              value: prerelease
        vars: versionName
      - if: ${!$vars.preid && !$vars.force}
        input'text:
          title: Preid (alpha, beta...)
        vars: preid
  - js: |
      const matchVersion = []
      const allVersions = ['major', 'minor', 'patch', 'premajor', 'preminor', 'prepatch', 'prerelease']
      allVersions.find(v => {
        matchVersion.push(v)
        return $vars.versionName === v
      })
      $vars.matchVersion = matchVersion.map(v => `(${v} )`).join('|')
      $vars.changeDir = this.scene.getPath($vars.changeDir)
      $vars.changeFile = this.scene.getPath($vars.changeFile)
  - name: Get new version ${$vars.matchVersion}
    sh: |
      mkdir -p "${$vars.changeDir}"
      npm version --no-commit-hooks --no-git-tag-version --tag-version-prefix="" --preid=${$vars.preid} ${$vars.versionName}
    vars:
      lastCommit: "chore${$vars.versionName === 'major' ? '!' : ''}: ${$vars.versionName} ${this.result}"
      version: ${ this.result }

  - name: Commit information
    runs:
      - echo: "Version: ${$vars.versionName} (${$vars.version})"
      - echo: "Preid: ${$vars.preid}"
      - echo: "Commit: ${$vars.lastCommit}"

      - if: ${!$vars.force}
        pause:

  - name: Collect git logs ${$vars.scanIndex}
    loop: ${$vars.scan}
    runs:
      - sh: |
          git log --skip ${$vars.scanIndex} -n ${$vars.scanCount} --pretty="format:* %s (%h)"
        vars:
          gitLog: ${this.result.split('\n').map(e => e.trim()).filter(e => e)}
      - js: |
          $vars.scanIndex += $vars.scanCount
          const { gitLog, gitLogs } = $vars
          const m = new RegExp($vars.commitFormat)
          for (const log of gitLog) {
            if (m.test(log)) {
              $vars.scan = false
              this.logger.debug('scan: stoped when match')
              break          
            }
            gitLogs.push(log)
          }
          if ($vars.scan && gitLog.length < $vars.scanCount) {
            $vars.scan = false
            this.logger.debug('scan: stoped when end')
          }
  - name: Write logs to changelog files
    file'write:
      path: ${$vars.changeDir}/${Date.now()}--${$vars.version}.md
      content: |
        ### ${$vars.version}

        ${$vars.gitLogs.join('\n')}

  - name: Concat changes file
    runs:
      - js: |
          const { readdirSync, readFileSync } = require('fs') 
          const { join, basename } = require('path')
          const files = readdirSync($vars.changeDir)
          files.sort().reverse()
          $vars.changeContent = []
          $vars.changeMenu = []
          files.forEach(f => {
            const idx = f.indexOf('--')
            const fname = basename(f)
            const d = fname.substring(0, idx)
            const mn = fname.substring(idx+2)
            $vars.changeMenu.push(`- [${mn}](#${d})  -  _${new Date(+d).toLocaleString()}_`)
            const content = readFileSync(join($vars.changeDir, f)).toString()
            if (mn === `${$vars.version}.md`) $vars.lastCommitContent = content.substring(content.indexOf('\n'))
            $vars.changeContent.push(`<a id="${d}"></a>\n${content}`)
          })
          this.logger.debug(files)
      - if: ${$vars.changeContent?.length}
        file'write:
          path: ${$vars.changeFile}
          content: |
            # Changes logs

            ## History

            ${$vars.changeMenu.join('\n')}

            ## Details

            ${$vars.changeContent.join('  \n')}

  - name: Add and commit changelog
    runs:
      - js: |
          $vars.gitCommitFiles = $vars.commitFiles.map(file => {
            return `git add ${this.scene.getPath(file)}`
          }).join('\n')
      - sh: |
          git add ${$vars.changeFile}
          git add ${$vars.changeDir}
          ${$vars.gitCommitFiles}
          git commit -m "${$vars.lastCommit}${$vars.lastCommitContent.replace(/"/g, '\\"')}"
          git log

      - name: Git summary
        debug: all
        sh: git show --summary

  - input'confirm:
      title: Do you want to push to repository ?
      default: false
    vars: isCommit

  - if: ${ $vars.isCommit }
    sh: |
      git push
